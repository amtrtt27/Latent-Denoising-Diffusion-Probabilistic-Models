11/17/2024 03:19:47 - INFO - __main__ - ***** Training arguments *****
11/17/2024 03:19:47 - INFO - __main__ - Namespace(config='configs/ddpm.yaml', data_dir='./data/imagenet100_128x128', image_size=128, batch_size=64, num_workers=4, num_classes=100, run_name='exp-3-ddpm', output_dir='experiments', num_epochs=10, learning_rate=0.001, weight_decay=0.0001, grad_clip=1.0, seed=42, mixed_precision='none', num_train_timesteps=1000, num_inference_steps=50, beta_start=0.0001, beta_end=0.02, beta_schedule='linear', variance_type='fixed_small', prediction_type='epsilon', clip_sample=True, clip_sample_range=1.0, unet_in_size=128, unet_in_ch=3, unet_ch=128, unet_ch_mult=[1, 2, 2, 4], unet_attn=[2, 3], unet_num_res_blocks=2, unet_dropout=0.0, latent_ddpm=False, use_cfg=False, cfg_guidance_scale=2.0, use_ddim=False, ckpt=None, predictor_type='epsilon', distributed=False, world_size=1, rank=0, local_rank=0, device='cuda', total_batch_size=64, max_train_steps=20320)
11/17/2024 03:19:47 - INFO - __main__ - ***** Running training *****
11/17/2024 03:19:47 - INFO - __main__ -   Num examples = 130000
11/17/2024 03:19:47 - INFO - __main__ -   Num Epochs = 10
11/17/2024 03:19:47 - INFO - __main__ -   Instantaneous batch size per device = 64
11/17/2024 03:19:47 - INFO - __main__ -   Total train batch size (w. parallel, distributed & accumulation) = 64
11/17/2024 03:19:47 - INFO - __main__ -   Total optimization steps per epoch 2032
11/17/2024 03:19:47 - INFO - __main__ -   Total optimization steps = 20320
  0%|                                                                                                               | 0/20320 [00:00<?, ?it/s]11/17/2024 03:19:47 - INFO - __main__ - Epoch 1/10
Traceback (most recent call last):
  File "/home/ubuntu/idl/Latent-Denoising-Diffusion-Probabilistic-Models/train.py", line 399, in <module>
    main()
  File "/home/ubuntu/idl/Latent-Denoising-Diffusion-Probabilistic-Models/train.py", line 333, in main
    model_pred = unet(noisy_images, timesteps, class_emb)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/conda/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/conda/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/idl/Latent-Denoising-Diffusion-Probabilistic-Models/models/unet.py", line 93, in forward
    h = layer(h, temb, c)
        ^^^^^^^^^^^^^^^^^
  File "/opt/conda/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/conda/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/idl/Latent-Denoising-Diffusion-Probabilistic-Models/models/unet_modules.py", line 210, in forward
    h = h + self.shortcut(x)
            ^^^^^^^^^^^^^^^^
  File "/opt/conda/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/conda/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/conda/lib/python3.12/site-packages/torch/nn/modules/conv.py", line 554, in forward
    return self._conv_forward(input, self.weight, self.bias)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/conda/lib/python3.12/site-packages/torch/nn/modules/conv.py", line 549, in _conv_forward
    return F.conv2d(
           ^^^^^^^^^
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 256.00 MiB. GPU 0 has a total capacity of 21.98 GiB of which 100.44 MiB is free. Including non-PyTorch memory, this process has 21.87 GiB memory in use. Of the allocated memory 21.11 GiB is allocated by PyTorch, and 475.60 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
